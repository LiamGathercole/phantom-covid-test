{"version":3,"sources":["assets/covid-logo.png","assets/phe_cases_london_boroughs.csv","assets/mapStyle.js","components/Map.js","components/DateText.js","components/DateSlider.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styles","elementType","stylers","color","visibility","featureType","Map","state","map","currentDay","this","props","currentDate","currentDayData","csvData","filter","item","date","data","setStyle","feature","borough","getProperty","boroughData","area_name","opacity","new_cases","fillColor","fillOpacity","strokeWeight","addGeoJson","LondonBoroughs","setState","addListener","event","revertStyle","overrideStyle","style","position","top","height","width","zIndex","bootstrapURLKeys","key","process","defaultCenter","center","defaultZoom","zoom","options","MapStyle","fullscreenControl","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","maps","handleApiLoaded","React","Component","defaultProps","lat","lng","DateText","split","splitDate","Number","className","getDay","getMonth","DateSlider","stopAnimation","gsap","globalTimeline","pause","changeDate","dateIndex","currentDateIndex","updateDate","dates","window","document","addEventListener","tween","value","TweenMax","to","length","onUpdate","Math","floor","delay","ease","Linear","easeNone","size","progressColor","onChange","max","App","readRemoteFile","header","complete","results","pop","Set","src","logo","alt","class","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.28401f80.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid-logo.ab535536.png\";","module.exports = __webpack_public_path__ + \"static/media/phe_cases_london_boroughs.368a4796.csv\";","export default {\r\n  styles: [\r\n    {\r\n      elementType: \"geometry\",\r\n      stylers: [\r\n        {\r\n          color: \"#212121\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      elementType: \"labels\",\r\n      stylers: [\r\n        {\r\n          visibility: \"off\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      elementType: \"labels.icon\",\r\n      stylers: [\r\n        {\r\n          visibility: \"off\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      elementType: \"labels.text.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#757575\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      elementType: \"labels.text.stroke\",\r\n      stylers: [\r\n        {\r\n          color: \"#212121\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"administrative\",\r\n      elementType: \"geometry\",\r\n      stylers: [\r\n        {\r\n          color: \"#757575\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"administrative.country\",\r\n      elementType: \"labels.text.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#9e9e9e\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"administrative.land_parcel\",\r\n      stylers: [\r\n        {\r\n          visibility: \"off\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"administrative.locality\",\r\n      elementType: \"labels.text.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#bdbdbd\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"administrative.neighborhood\",\r\n      stylers: [\r\n        {\r\n          visibility: \"off\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"poi\",\r\n      elementType: \"labels.text\",\r\n      stylers: [\r\n        {\r\n          visibility: \"off\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"poi\",\r\n      elementType: \"labels.text.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#757575\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"poi.business\",\r\n      stylers: [\r\n        {\r\n          visibility: \"off\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"poi.park\",\r\n      elementType: \"geometry\",\r\n      stylers: [\r\n        {\r\n          color: \"#181818\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"poi.park\",\r\n      elementType: \"labels.text.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#616161\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"poi.park\",\r\n      elementType: \"labels.text.stroke\",\r\n      stylers: [\r\n        {\r\n          color: \"#1b1b1b\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"road\",\r\n      elementType: \"geometry.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#2c2c2c\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"road\",\r\n      elementType: \"labels.icon\",\r\n      stylers: [\r\n        {\r\n          visibility: \"off\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"road\",\r\n      elementType: \"labels.text.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#8a8a8a\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"road.arterial\",\r\n      elementType: \"geometry\",\r\n      stylers: [\r\n        {\r\n          color: \"#373737\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"road.highway\",\r\n      elementType: \"geometry\",\r\n      stylers: [\r\n        {\r\n          color: \"#3c3c3c\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"road.highway.controlled_access\",\r\n      elementType: \"geometry\",\r\n      stylers: [\r\n        {\r\n          color: \"#4e4e4e\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"road.local\",\r\n      elementType: \"labels.text.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#616161\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"transit\",\r\n      stylers: [\r\n        {\r\n          visibility: \"off\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"transit\",\r\n      elementType: \"labels.text.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#757575\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"water\",\r\n      elementType: \"geometry\",\r\n      stylers: [\r\n        {\r\n          color: \"#000000\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"water\",\r\n      elementType: \"labels.text.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#3d3d3d\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n","import React from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\n\r\nimport MapStyle from \"../assets/mapStyle\";\r\nimport LondonBoroughs from \"../assets/london_boroughs\";\r\n\r\nimport \"./Map.css\";\r\n\r\nconst GOOGLE_MAPS_API_KEY = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\r\n\r\nclass Map extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      map: null\r\n    };\r\n  }\r\n  static defaultProps = {\r\n    center: {\r\n      lat: 51.506811,\r\n      lng: -0.117133\r\n    },\r\n    zoom: 11\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    let currentDay = this.props.currentDate;\r\n    let currentDayData = this.props.csvData.filter(\r\n      item => item.date === currentDay\r\n    );\r\n    let that = this;\r\n\r\n    if (this.state.map) {\r\n      this.state.map.data.setStyle(function (feature) {\r\n        let borough = feature.getProperty(\"name\");\r\n        let boroughData = currentDayData.filter(\r\n          item => item.area_name === borough\r\n        );\r\n        var color,\r\n          opacity = null;\r\n\r\n        if (boroughData[0]) {\r\n          color = \"red\";\r\n          opacity = boroughData[0] ? (boroughData[0].new_cases * 1.5) / 100 : 0;\r\n\r\n          if (opacity < 0.3) {\r\n            opacity = opacity * 1.5;\r\n          }\r\n        }\r\n        return {\r\n          fillColor: color,\r\n          fillOpacity: opacity,\r\n          strokeWeight: 0\r\n        };\r\n      });\r\n    }\r\n  }\r\n\r\n  handleApiLoaded(map) {\r\n    map.data.addGeoJson(LondonBoroughs);\r\n    this.setState({ map });\r\n\r\n    map.data.addListener(\"mouseover\", event => {\r\n      map.data.revertStyle();\r\n      map.data.overrideStyle(event.feature, { strokeWeight: 5 });\r\n    });\r\n\r\n    map.data.addListener(\"mouseout\", event => {\r\n      map.data.revertStyle();\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // Important! Always set the container height explicitly\r\n      <div\r\n        style={{\r\n          position: \"absolute\",\r\n          top: \"0\",\r\n          height: \"100vh\",\r\n          width: \"100%\",\r\n          zIndex: \"1\"\r\n        }}\r\n      >\r\n        <GoogleMapReact\r\n          bootstrapURLKeys={{ key: GOOGLE_MAPS_API_KEY }}\r\n          defaultCenter={this.props.center}\r\n          defaultZoom={this.props.zoom}\r\n          options={{ styles: MapStyle.styles, fullscreenControl: false }}\r\n          yesIWantToUseGoogleMapApiInternals\r\n          onGoogleApiLoaded={({ map, maps }) => this.handleApiLoaded(map, maps)}\r\n        ></GoogleMapReact>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\n\r\nimport \"./DateText.css\";\r\n\r\nclass DateText extends React.Component {\r\n  getDay() {\r\n    const splitDate = this.props.currentDate.split(\"-\");\r\n\r\n    return splitDate[2];\r\n  }\r\n\r\n  getMonth() {\r\n    const splitDate = this.props.currentDate.split(\"-\");\r\n\r\n    const months = [null, \"JAN\", \"FEB\", \"MAR\", \"APR\", \"MAY\", \"JUN\"];\r\n\r\n    const monthIndex = Number(splitDate[1]);\r\n\r\n    return months[monthIndex];\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"day\">{this.getDay()}</h1>\r\n        <h2 className=\"month\">{this.getMonth()}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DateText;\r\n","import React from \"react\";\r\nimport { CircleSlider } from \"react-circle-slider\";\r\nimport { gsap, TweenMax, Linear } from \"gsap\";\r\nimport DateText from \"./DateText\";\r\n\r\nimport \"./DateSlider.css\";\r\n\r\nclass DateSlider extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { currentDateIndex: 0 };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.document.addEventListener(\"mousedown\", this.stopAnimation);\r\n\r\n    let tween = {\r\n      value: 0\r\n    };\r\n\r\n    TweenMax.to(tween, 15, {\r\n      value: this.props.dates.length - 1,\r\n      onUpdate: () => this.changeDate(Math.floor(tween.value)),\r\n      delay: 1,\r\n      ease: Linear.easeNone\r\n    });\r\n  }\r\n\r\n  stopAnimation = () => {\r\n    gsap.globalTimeline.pause();\r\n  };\r\n\r\n  changeDate = dateIndex => {\r\n    this.setState({ currentDateIndex: dateIndex });\r\n    this.props.updateDate(this.props.dates[dateIndex]);\r\n  };\r\n\r\n  render() {\r\n    const value = this.state.currentDateIndex;\r\n\r\n    return (\r\n      <div className=\"date-slider\">\r\n        <CircleSlider\r\n          value={value}\r\n          size={200}\r\n          progressColor=\"red\"\r\n          onChange={this.changeDate}\r\n          max={this.props.dates.length - 1}\r\n        />\r\n        <DateText currentDate={this.props.dates[value]} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DateSlider;\r\n","import React from \"react\";\r\nimport { readRemoteFile } from \"react-papaparse\";\r\n\r\nimport logo from \"./assets/covid-logo.png\";\r\nimport csvData from \"./assets/phe_cases_london_boroughs.csv\";\r\nimport \"./App.css\";\r\n\r\nimport Map from \"./components/Map\";\r\nimport DateSlider from \"./components/DateSlider\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { dates: null, currentDate: null };\r\n  }\r\n\r\n  componentDidMount() {\r\n    readRemoteFile(csvData, {\r\n      header: true,\r\n      complete: results => {\r\n        const csvData = results.data;\r\n        // remove header item\r\n        csvData.pop();\r\n\r\n        const dates = [...new Set(csvData.map(item => item.date))];\r\n\r\n        this.setState({ dates, csvData });\r\n      }\r\n    });\r\n  }\r\n\r\n  updateDate = date => {\r\n    this.setState({ currentDate: date });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\r\n        {this.state.dates ? (\r\n          <DateSlider\r\n            class=\"date-slider\"\r\n            dates={this.state.dates}\r\n            updateDate={this.updateDate}\r\n          />\r\n        ) : null}\r\n\r\n        {this.state.csvData ? (\r\n          <Map\r\n            csvData={this.state.csvData}\r\n            currentDate={this.state.currentDate}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}